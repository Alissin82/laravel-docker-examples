services:
  web:
    image: nginx:alpine
    build:
      context: ../../example-app
      dockerfile: ../production/nginx-fpm/nginx/Dockerfile
    volumes:
      - laravel-storage:/var/www/storage:ro  # Mount the storage volume (in case you want to use storage:link)
    networks:
      - laravel
    ports:
      - "${NGINX_PORT}:80"
    environment:
      - NGINX_HOST=${NGINX_HOST}
    depends_on:
      php-fpm:
        condition: service_healthy  # Wait for php-fpm health check

  php-fpm:
    # For the php-fpm service, we will create a custom image to install the necessary PHP extensions and setup proper permissions.
    build:
      context: ../../example-app
      dockerfile: ../production/nginx-fpm/php-fpm/Dockerfile
    volumes:
      - laravel-storage:/var/www/storage  # Mount the storage volume
    environment:
      - APP_NAME=TestApp
      - APP_KEY=base64:y6S7gjyAO/PVAJMBvJSJUCO8qiz92qvcNAPRKH3hpj4=
      - APP_DEBUG=true
    networks:
      - laravel
    healthcheck:
      test: ["CMD-SHELL", "php-fpm-healthcheck || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    # The `depends_on` section tells Docker Compose to
    # start the database before your application.
    depends_on:
      postgres:
        condition: service_healthy
  
  php-cli:
    build:
      context: ../../example-app
      dockerfile: ../production/nginx-fpm/php-cli/Dockerfile
    tty: true   # Keep the terminal open
    stdin_open: true  # Keep stdin open to attach to the container
    environment:
      - APP_NAME=TestApp
    networks:
      - laravel

  postgres:
    image: postgres:16
    restart: always
    user: postgres
    secrets:
      - db-password
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${DB_DATABASE}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - laravel
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    networks:
      - laravel
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  laravel:

volumes:
  postgres-data:
  laravel-storage:

secrets:
  db-password:
    file: db-password.txt
